    def __init__(self,first,last,social,contel,conemail,fulladdress,salary,dept,manager,position,insure,transit,f401k,vac,pers,sick)
self.first=first
self.last=lastlast
self.social=social
self.contel=contel
self.conemail=conemail
self.fulladdress=fulladdress
self.salary=salary
self.dept=dept
self.manager=manager
self.position=position
self.insure=insure
self.transit=transit
self.f401k=f401k
self.vac=vac
self.pers=pers
self.sick=sick






firstname= input("first name: ")
lastname= input("last name: ")
ssn= input("ssn: ")
telno= input("tel no: ")
email= input("email: ")
streetaddress= input("street address: ")
city= input("city: ")
state= input("state: ")
zipcode= input("zipcode: ")
salary= input("salary: ")
dept= input("dept: ")
manager= input("manager: ")
position= input("position: ")
insurance= input("insurance: ")
transitpay= input("transitpay: ")
401k= input("401k: ")
vacationtime= input("vacation time: ")
personaltime= input("personal time: ")
sicktime= input("sick time: ")



dataentered.append(firstname)
dataentered.append(lastname)
dataentered.append(ssn)
dataentered.append(telno)
dataentered.append(email)
dataentered.append(streetaddress)
dataentered.append(city)
dataentered.append(state)
dataentered.append(zipcode)
dataentered.append(salary)
dataentered.append(dept)
dataentered.append(manager)
dataentered.append(position)
dataentered.append(insurance)
dataentered.append(transitpay)
dataentered.append(401k)
dataentered.append(vacationtime)
dataentered.append(personaltime)
dataentered.append(sicktime)









    empFname=dataentered[0]
    empLname =dataentered[1]
    socno =dataentered[2]
    contactTel =dataentered[3]
    contactEmail =dataentered[4]
    contactAdd1 =dataentered[5]
    contactAddCity =dataentered[6]
    contactAddSt =dataentered[7]
    contactAddZip =dataentered[8]
    empSal =dataentered[9]
    dept =dataentered[10]
    mgr =dataentered[11]
    posit =dataentered[12]
    healthIns =dataentered[13]
    transitpay =dataentered[14]
    four1k =dataentered[15]
    vacationtime =dataentered[16]
    personaltime =dataentered[17]
    sicktime =dataentered[18]


fullname = empFname+empLname
empAddress = contactAdd1 + contactAddCity + contactAddSt +contactAddZip




                




def subverify3():
	choose3 = int(input('Which line should we edit: '))
    more3 = input('any others y or n: ')
    if more3 == 'y':
    	print('seriously?! Damn! well fix those 3 first then fix the next 3 when i ask you to verify ')
    if more3 == "n":
        print("ok great let's edit!")
    else:
        print("C'mon dude! y or n")
        subverify3()

def subverify2():
	choose2 = int(input('Which line should we edit: '))
    more2 = input('any others y or n: ')
    if more2 == 'y':
    	subverify3()
    if more2 == "n":
        print("ok great let's edit!")
    else:
        print("C'mon dude! y or n")
        subverify2()

def subverify1():
	choose = int(input('Which line should we edit: '))
    more = input('any others y or n: ')
    if more == 'y':
    	subverify2()
    if more == "n":
        print("ok great let's edit!")
    else:
        print("C'mon dude! y or n")
        subverify1()









                choose2 = int(input('Which line should we edit: '))
                more2 = input('any others y or n: ')
                if more2 == 'y':
                    choose3 = int(input('Which line should we edit: '))
                    more3 = input('any others y or n: ')
                    if more3 == 'y':
                        print('seriously?! Damn! well fix those 3 first then fix the next 3 when i ask you to verify ')
                    if more3 == "n":
                        print("ok great let's edit!")
                    else:
                        print("C'mon dude! y or n")
                        more3 = input('any others y or n: ')
                if more2 == "n":
                    print("ok great let's edit!")
                    choose2 = int(input('Which line should we edit: '))
                else:
                    print("C'mon dude! y or n")
                    more2 = input('any others y or n: ')
            

+++++++++++++++++++++++++++++++++++++++++++++++


 def verifier():
        verify = input('enter (1) to confirm data or (2) to edit data: ')
        if verify == '1':
            print('yayus!')
        else if verify == '2':
            choose = int(input('Which line should we edit: '))
            print(f'{dataentered[choose]} will now be edited. Enter new Info below')
            newentry = input('correction: ')
            dataentered[choose] = newentry
            print(f'Info on line {choose} has now been changed to {newentry}.')
            print('Review Updated Employee entry')
            for z in range (len(dataentered)):
                print(f"{z} {dataenetered[z]}")
            verifier()




    def verifier():
        verify = input('enter (y) to confirm data or (n) to edit data: ')
        if verify == 'y':
            print('yayus!')
        elif verify =='n':
        	def subverify1():
                while True:
                    try:
                        choose = int(input('Which line should we edit: '))
                        if choose <= (len(dataenetered)-1) and choose >= 0:
                            more = input('any others y or n: ')
                            while True:
                                if more == 'y':
                                    print('ok cool, but let us fix this line first')
                                    print(f'{dataentered[choose]} will now be edited. Enter new Info below')
                                    newentry = input('correction: ')
                                    dataentered[choose] = newentry
                                    print(f'Info on line {choose} has now been changed to {newentry}.')
                                    choose = int(input('Which line should we edit: '))

                                elif more == "n":
                                    print("ok great let's edit!")
                                    print(f'{dataentered[choose]} will now be edited. Enter new Info below')
                                    newentry = input('correction: ')
                                    dataentered[choose] = newentry
                                    print(f'Info on line {choose} has now been changed to {newentry}.')
                                    for x in range (len(dataenetered)):
                                        print(f"{x} ... {dataentered[x]}")
                                    verifier()
                                    break
                                else:
                                    print("C'mon dude! y or n")
                                    more = input('any others y or n: ')
                        else:
                            print('choose a line')
                            subverify1()
                            break
                    except:
                        print("input has to be a number")
                        subverify1()
                        break
                    finally:
                        break
            subverify1()   
        else:
        	print('y or n dude...wtf :(') 
        	verifier()
    verifier()




hsk=['*deptmgr','*adeptmgr','deptsup','hskper','hseman']
FD=['*deptmgr','*adeptmgr','*ntmgr','deptsup','ntaud','fdagnt','bllmn','drmn']
eng=['*deptmgr','*adeptmgr','deptsup','engnr']
pbx=['*deptmgr','*adeptmgr','deptsup','oprt'r]
sle=['*deptmgr','*adeptmgr','deptsup','res']
acc=['*cntrller','*asscntrller','acctnt']











 def subverify1():
            while True:
                try:
                    choose = int(input('Which line should we edit: '))
                    if choose <= (len(dataentered)-1) and choose >= 0:
                        more = input('any others y or n: ')
                            if more == 'y':
                                print('ok cool, but let us fix this line first')
                                print(f'{dataentered[choose]} will now be edited. Enter new Info below')
                                newentry = input('correction: ')
                                dataentered[choose] = newentry
                                print(f'Info on line {choose} has now been changed to {newentry}.')
                                choose = int(input('Which line should we edit: '))
                                more = input('any others y or n: ')

                            elif more == "n":
                                print("ok great let's edit!")
                                print(f'{dataentered[choose]} will now be edited. Enter new Info below')
                                newentry = input('correction: ')
                                dataentered[choose] = newentry
                                print(f'Info on line {choose} has now been changed to {newentry}.')
                                for x in range (len(dataentered)):
                                    print(f"{x} ... {dataentered[x]}")
                                verifier()
                                break
                            else:
                                print("C'mon dude! y or n")
                                more = input('any others y or n: ')
                    else:
                        print('choose a line')
                        subverify1()
                        break
                except:
                    print("input has to be a number")
                    subverify1()
                    break
                finally:
                    break
        subverify1()   



statedictionary = {'AL':"Alabama",'AK':"Alaska",'AZ':"Arizona",'AR':"Arkansas",'CA':"California",'CO':"Colorado",'CT':"Connecticut",'DE':"Delaware",'FL':"Florida",'GA':"Georgia",'HI':"Hawaii",'ID':"Idaho",'IL':"Illinois",'IN':"Indiana",'IA':"Iowa",'KS':"Kansas",'KY':"Kentucky",'LA':"Louisiana",'ME':"Maine",'MD':"Maryland",'MA':"Massachusetts",'MI':"Michigan",'MN':"Minnesota",'MS':"Mississippi",'MO':"Missouri",'MT':"Montana",'NE':"Nebraska",'NV':"Nevada",'NH':"New Hampshire",'NJ':"New Jersey",'NM':"New Mexico",'NY':"New York",'NC':"North Carolina",'ND':"North Dakota",'OH':"Ohio",'OK':"Oklahoma",'OR':"Oregon",'PA':"Pennsylvania",'RI':"Rhode Island",'SC':"South Carolina",'SD':"South Dakota",'TN':"Tennessee",'TX':"Texas",'UT':"Utah",'VT':"Vermont",'VA':"Virginia",'WA':"Washington",'WV':"West Virginia",'WI':"Wisconsin",'WY':"Wyoming"}

stablist = ['AL','AK','AZ','AR','CA','CO','CT','DE','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY']








    fouronek= input("401k: ")
    transitpay= input("transitpay: ")
    manager =input("manager: ")
    salary= input("salary: ")
    hired = input("hire date: ")
    


    zipcode= input("zipcode: ")
    state= input("state: ")
    city= input("city: ")
    streetaddress= input("street address: ")
    email= input("email: ")
    telno= input("tel no: ")
    ssn= input("ssn: ")
    lastname= input("last name: ")

    firstname= input("first name: ")





empFname=dataentered[0]
empLname =dataentered[1]
fullname = empFname + empLname
socno =dataentered[2]
contactTel =dataentered[3]
contactEmail =dataentered[4]
contactAdd1 =dataentered[5]
contactAddCity =dataentered[6]
contactAddSt =dataentered[7]
contactAddZip =dataentered[8]
empAddress = contactAdd1 + contactAddCity + contactAddSt + contactAddZip
empHireDate = dataentered[9]
m = dataentered[10] 
d = dataentered[11]
y = dataentered[12]
empSal =dataentered[13]
dept =dataenteredSET2[0]
mgr =dataentered[14]
posit =dataenteredSET2[1]
healthIns =dataenteredSET2[2]
vacationtime =dataenteredSET2[3]
personaltime =dataenteredSET2[4]
sicktime =dataenteredSET2[5]





empHdMonth+empHdday+empHdyear+








 Employee(first,last,nickname,social,contel,address,zipcode,hiremonth,hiredate,hireyear,dept,position,hourlypay,weeklypay,monthlypay,yearlypay,sicktaken,sickremaining,perstaken,persremaining,vactaken,vacremaining,sickdates,persdates,vacdates)
















        self.first = first
        self.last = last
        self.nickname = nickname
        self.social = social
        self.contel = contel
        self.address = address
        self.zipcode = zipcode 
        self.hiremonth = hiremonth     
        self.hiredate = hiredate
        self.hireyear = hireyear
        self.dept = dept
        self.position = position
        self.hourlypay = hourlypay
        self.weeklypay= weeklypay
        self.monthlypay= monthlypay
        self.yearlypay= yearlypay
        self.sicktaken = sicktaken
        self.sickremaining = sickremaining
        self.perstaken = perstaken
        self.persremaining = persremaining
        self.vactaken = vactaken
        self.vacremaining = vacremaining
        self.sickdates = sickdates
        self.persdates = persdates
        self.vacdates = vacdates






first = nmlist[x][0]
last = nmlist[x][1] 
nickname = nmlist[x][2] 
social = nmlist[x][3] 
contel = nmlist[x][4] 
address = nmlist[x][5] 
zipcode  = nmlist[x][6] 
hiremonth = nmlist[x][7]
hiredate = nmlist[x][8] 
hireyear = nmlist[x][9] 
dept = nmlist[x][11] 
position = nmlist[x][12] 
hourlypay = nmlist[x][13] 
weeklypay = nmlist[x][14] 
monthlypay = nmlist[x][15] 
yearlypay = nmlist[x][16] 
sicktaken = nmlist[x][17] 
sickremaining = nmlist[x][18] 
perstaken = nmlist[x][19] 
persremaining = nmlist[x][21] 
vactaken = nmlist[x][22] 
vacremaining = nmlist[x][23] 
sickdates = nmlist[x][24] 
persdates = nmlist[x][25] 
vacdates = nmlist[x][26] 


        z = x * 4
        first = nmlist[z][0]
        last = nmlist[z][1] 
        nickname = nmlist[z][2] 
        social = nmlist[z][3] 
        contel = nmlist[z][4] 
        address = nmlist[z][5] + ' ' + nmlist[z][6] + ' ' + nmlist[z][7] 
        zipcode  = nmlist[z][8]
        hiremonth = nmlist[z][9]
        hiredate = nmlist[z][10]
        hireyear = nmlist[z][11]
        dept = nmlist[z][12]
        position = nmlist[z][13]
        hourlypay = nmlist[z][14]
        weeklypay = nmlist[z][15]
        monthlypay = nmlist[z][16]
        yearlypay = nmlist[z][17]
        sicktaken = nmlist[z][18]
        sickremaining = nmlist[z][19]
        perstaken = nmlist[z][20]
        persremaining = nmlist[z][21]
        vactaken = nmlist[z][22]
        vacremaining = nmlist[z][23]
        sickdates = nmlist[z+1][24]
        persdates = nmlist[z+2][25]
        vacdates = nmlist[z+3][26]




8] 
9] 
10]
11] 
12] 
13] 
14] 
15] 
16] 
17] 
18] 
19] 
20]
21] 
22] 
23]
24]
25]
26] 
0] 
0] 
0] 






[reginaldoquizon,jasonbourne,isaganidimayacyac,theovan gogh,josequizon,sarawalker,johncasey,charlesbartowski]
['jason',
 'bourne',
 'jabo',
 '987654321',
 '9876543211',
 '1 ultimatum st',
 'helena',
 'MT',
 '54321',
 '01',
 '01',
 '20',
 'acct',
 'acctnt',
 '31.25',
 '1250.0',
 '5000.0',
 '65000.0',
 '0',
 '0',
 '0',
 '0',
 '0',
 '0',
 ['0'],
 ['0'],
 ['0']]




        













(toedit) == '1' or (toedit) == '2' or (toedit) == '3' or  (toedit) == '4' or (toedit) == '5' or (toedit) == '6' or (toedit) == '7' or (toedit) == '8' or (toedit) == '9' or  (toedit) == '10' or (toedit) == '11' or (toedit) == '12' or (toedit) == '13' or  (toedit) == '14' or (toedit) == '15' or (toedit) == '16' or (toedit) == '17' or 

self.first = first
        self.last = last
        self.nickname = nickname
        self.social = social
        self.contel = contel
        self.address = address
        self.city = city
        self.state = state
        self.zipcode = zipcode 
        self.hiremonth = hiremonth     
        self.hiredate = hiredate
        self.hireyear = hireyear
        self.dept = dept
        self.position = position
        self.hourlypay = hourlypay
        self.weeklypay= weeklypay
        self.monthlypay= monthlypay
        self.yearlypay= yearlypay
        self.sicktaken = sicktaken
        self.sickremaining = sickremaining
        self.perstaken = perstaken
        self.persremaining = persremaining
        self.vactaken = vactaken
        self.vacremaining = vacremaining
        self.sickdates = sickdates
        self.persdates = persdates
        self.vacdates = vacdates




aa[x]
alphsortyearlypay = {key: value for key, value in sorted(obdict.items(), key=lambda item: int(float(item[1].yearlypay)))}







noclistkey=[]
for x in range(len(dictionaryhold)):
    noclistkey.append(dictionaryhold[x]['first']+dictionaryhold[x]['last'])
print(noclistkey)
obdict=dict(zip(noclistkey,noclist))

print(obdict['jasonbourne'].zipcode)

for key in obdict:
    print(obdict[key].last)
directory=[]    

alphsortfirst = {key: value for key, value in sorted(obdict.items(), key=lambda item: item[1].first)}
alphsortlast = {key: value for key, value in sorted(obdict.items(), key=lambda item: item[1].last)}
alphsortdept = {key: value for key, value in sorted(obdict.items(), key=lambda item: item[1].dept)}
alphsortposition = {key: value for key, value in sorted(obdict.items(), key=lambda item: item[1].position)}

numsortyearlypay = {key: value for key, value in sorted(obdict.items(), key=lambda item: int(float(item[1].yearlypay)))}
numsortzipcode = {key: value for key, value in sorted(obdict.items(), key=lambda item: int(float(item[1].zipcode)))}
numsorthdatecombo = {key: value for key, value in sorted(obdict.items(), key=lambda item: int(float(item[1].hdatecombo)))}
numsortsicktaken = {key: value for key, value in sorted(obdict.items(), key=lambda item: int(item[1].sicktaken))}
numsortperstaken = {key: value for key, value in sorted(obdict.items(), key=lambda item: int(item[1].perstaken))}
numsortvactaken = {key: value for key, value in sorted(obdict.items(), key=lambda item: int(item[1].vactaken))}

def sortbysickRemain():
numsortsickremaining = {key: value for key, value in sorted(obdict.items(), key=lambda item: int(item[1].sickremaining))}
    pass

def sortbypersRemain():
numsortpersremaining = {key: value for key, value in sorted(obdict.items(), key=lambda item: int(item[1].persremaining))}
    pass

def sortbyvacRemain():
numsortvacremaining = {key: value for key, value in sorted(obdict.items(), key=lambda item: int(item[1].vacremaining))}
    






print(f"{self} terminal login generated:\n{terminal}\n{terminal2}\n{terminal3}\n{terminal4}\n{terminal5}")




        terminal = self.first+self.last
        terminal2 = self.nickname+self.last[0]
        terminal3 = self.first[0]+self.last
        terminal4 = self.first+self.contel[-4:]
        terminal5 = self.first+self.last[0]


















# this function only runs inside positionsalprint func. it provides submenu for printing  spcific dep mgr sals
def mgmtpositStat(l1,l2,l3,l4,l5,l6,l7,l8,l9,l10):
    for mgsal in range(len(mngmtString)):
        print(f'{mgsal}....{mngmtString[mgsal]}')
        
    print(f'{len(mngmtString)+1}....All')

    userchoEEmg = input('Please choose an option: ')


    if userchoEEmg in ('012345') and len(userchoEEmg)>0:
        MgChospositdictView = mngmt[int(userchoEEmg)]
        for posal in MgChospositdictView:
            l1.append(MgChospositdictView[posal].yearlypay)
            l2.append(MgChospositdictView[posal].monthlypay)
            l3.append(MgChospositdictView[posal].weeklypay)
        print(f'{mngmtString[int(userchoEEmg)]}....total count:{len(MgChospositdictView)}')
    elif userchoEEmg == '6':
        for mgposal in range(len(mngmt)):
            for subposal in mngmt[mgposal]:
                l1.append(mngmt[mgposal][subposal].yearlypay)
                l2.append(mngmt[mgposal][subposal].monthlypay)
                l3.append(mngmt[mgposal][subposal].weeklypay)
        print(f'{mngmtString[int(userchoEEmg)]}....total count:{len(MgChospositdictView)}')                
    else:
        print('Sorry try again')
        mgmtpositsal()
        
        
# this prints salary by position // prints mgmt as whole per dept        
def positionStat():
    PstsalcollectY = []
    PstsalcollectM = []
    PstsalcollectW = []
    Pstsiclist = []
    Pstperlist = []
    Pstvaclist = []
    Pstsictklist = []
    Pstpertklist = []
    Pstvactklist = []
    Pstexplist = []
    
    for statpos in range(len(positlistSTR)):
        print(f'{statpos}....{positlistSTR[statpos]}')
        
    print(f'{(len(positlistSTR))+1}....Management Listing by dep')
    
    userchoEE = input('Please choose the salary position you wish to print: ')
    
    if userchoEE in ('0123456789') and len(userchoEE)>0:
        chospositdictView = positlist[int(userchoEE)]
        for ov in chospositdictView:
            PstsalcollectY.append(chospositdictView[ov].yearlypay)
            PstsalcollectM.append(chospositdictView[ov].monthlypay)
            PstsalcollectW.append(chospositdictView[ov].weeklypay)
            Pstsiclist.append(int(chospositdictView[ov].sickremaining))
            Pstperlist.append(int(chospositdictView[ov].persremaining))
            Pstvaclist.append(int(chospositdictView[ov].vacremaining))
            Pstsictklist.append((int(chospositdictView[ov].sicktaken))
            Pstpertklist.append((int(chospositdictView[ov].perstaken))
            Pstvactklist.append((int(chospositdictView[ov].vactaken))
            Pstexplist.append((int(chospositdictView[ov].empnoyrs))



        print(f'{positlistSTR[int(userchoEE)]}....total count:{len(chospositdictView)}')
    elif userchoEE == '11' and len(userchoEE)>0:
        mgmtpositsal(PstsalcollectY,PstsalcollectM,PstsalcollectW)
    else:
        print('sorry try again')
        positionSalprint()
    
    yearlyAVG = float((sum(PstsalcollectY)) // (len(PstsalcollectY)))
    monthlyAVG = float((sum(PstsalcollectM)) // (len(PstsalcollectM)))
    weeklyAVG = float((sum(PstsalcollectW)) // (len(PstsalcollectW)))
    

    print(f'Yearly total....{sum(PstsalcollectY)}\nYearly Avg....{yearlyAVG}\n')
    print(f'Monthly total....{sum(PstsalcollectM)}\nMonthly Avg....{monthlyAVG}\n')
    print(f'Weekly total....{sum(PstsalcollectW)}\nWeekly Avg....{weeklyAVG}\n')